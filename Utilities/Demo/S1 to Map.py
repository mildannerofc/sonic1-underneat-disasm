# Code generated by LLaMA

replace_map = {
    0x7F: 'UDLRABC',
    0x7E: 'DLRABC',
    0x7D: 'ULRABC',
    0x7C: 'LRABC',
    0x7B: 'UDRABC',
    0x7A: 'DRABC',
    0x79: 'URABC',
    0x78: 'RABC',
    0x77: 'UDLABC',
    0x76: 'DLABC',
    0x75: 'ULABC',
    0x74: 'LABC',
    0x73: 'UDABC',
    0x72: 'DABC',
    0x71: 'UABC',
    0x70: 'ABC',
    0x6F: 'UDLRAC',
    0x6E: 'DLRAC',
    0x6D: 'ULRAC',
    0x6C: 'LRAC',
    0x6B: 'UDRAC',
    0x6A: 'DRAC',
    0x69: 'URAC',
    0x68: 'RAC',
    0x67: 'UDLAC',
    0x66: 'DLAC',
    0x65: 'ULAC',
    0x64: 'LAC',
    0x63: 'UDAC',
    0x62: 'DAC',
    0x61: 'UAC',
    0x60: 'AC',
    0x5F: 'UDLRAB',
    0x5E: 'DLRAB',
    0x5D: 'ULRAB',
    0x5C: 'LRAB',
    0x5B: 'UDRAB',
    0x5A: 'DRAB',
    0x59: 'URAB',
    0x58: 'RAB',
    0x57: 'UDLAB',
    0x56: 'DLAB',
    0x55: 'ULAB',
    0x54: 'LAB',
    0x53: 'UDAB',
    0x52: 'DAB',
    0x51: 'UAB',
    0x50: 'AB',
    0x4F: 'UDLRA',
    0x4E: 'DLRA',
    0x4D: 'ULRA',
    0x4C: 'LRA',
    0x4B: 'UDRA',
    0x4A: 'DRA',
    0x49: 'URA',
    0x48: 'RA',
    0x47: 'UDLA',
    0x46: 'DLA',
    0x45: 'ULA',
    0x44: 'LA',
    0x43: 'UDA',
    0x42: 'DA',
    0x41: 'UA',
    0x40: 'A',
    0x3F: 'UDLRBC',
    0x3E: 'DLRBC',
    0x3D: 'ULRBC',
    0x3C: 'LRBC',
    0x3B: 'UDRBC',
    0x3A: 'DRBC',
    0x39: 'URBC',
    0x38: 'RBC',
    0x37: 'UDLBC',
    0x36: 'DLBC',
    0x35: 'ULBC',
    0x34: 'LBC',
    0x33: 'UDBC',
    0x32: 'DBC',
    0x31: 'UBC',
    0x30: 'BC',
    0x2F: 'UDLRC',
    0x2E: 'DLRC',
    0x2D: 'ULRC',
    0x2C: 'LRC',
    0x2B: 'UDRC',
    0x2A: 'DRC',
    0x29: 'URC',
    0x28: 'RC',
    0x27: 'UDLC',
    0x26: 'DLC',
    0x25: 'ULC',
    0x24: 'LC',
    0x23: 'UDC',
    0x22: 'DC',
    0x21: 'UC',
    0x20: 'C',
    0x1F: 'UDLRB',
    0x1E: 'DLRB',
    0x1D: 'ULRB',
    0x1C: 'LRB',
    0x1B: 'UDRB',
    0x1A: 'DRB',
    0x19: 'URB',
    0x18: 'RB',
    0x17: 'UDLB',
    0x16: 'DLB',
    0x15: 'ULB',
    0x14: 'LB',
    0x13: 'UDB',
    0x12: 'DB',
    0x11: 'UB',
    0x10: 'B',
    0x0F: 'UDLR',
    0x0E: 'DLR',
    0x0D: 'ULR',
    0x0C: 'LR',
    0x0B: 'UDR',
    0x0A: 'DR',
    0x09: 'UR',
    0x08: 'R',
    0x07: 'UDL',
    0x06: 'DL',
    0x05: 'UL',
    0x04: 'L',
    0x03: 'UD',
    0x02: 'D',
    0x01: 'U',
    0x00: ''
}

with open('main.bin', 'rb') as f, open('output.asm', 'w') as o:
    o.write('; ---------------------------------------------------------------------------\n'
           '; Demo Script\n'
           '; ---------------------------------------------------------------------------\n\n'
           '\t\t; length, button\n')
    for byte1, byte2 in zip(*[iter(open('main.bin', 'rb').read())]*2):
        replaced_byte1 = replace_map.get(byte1, str(byte1) if byte1 <= 9 else f'${byte1:X}'.lstrip('0') if byte1 < 0xA else f'${byte1:X}')
        replaced_byte2 = str(byte2 + 1) if byte2 + 1 <= 9 else f'${byte2 + 1:X}'
        o.write(f'\t\tdemoinput {replaced_byte1}{", " + replaced_byte2 if replaced_byte2 else ""}\n')
